<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Neo&#39;s Journal</title>
  <subtitle></subtitle>
  <link href="https://neosahadeo.github.io/journal//feed.xml" rel="self"/>
  <link href="https://neosahadeo.github.io/journal//"/>
  
    <updated>2025-04-04T00:00:00Z</updated>
  
  <id>https://neosahadeo.github.io/journal/</id>
  <author>
    <name>Neo Sahadeo</name>
    <email>neosahadeo@protonmail.com</email>
  </author>
  
    
    <entry>
      <title>Huffman Coding</title>
      <link href="https://neosahadeo.github.io/journal//journal/posts/2025-04-03-huffman-coding/"/>
      <updated>2025-04-03T00:00:00Z</updated>
      <id>https://neosahadeo.github.io/journal//journal/posts/2025-04-03-huffman-coding/</id>
      <content type="html">
        <![CDATA[
      <blockquote>
<p>Huffman coding is a technique for compressing data without losing any of the details (<em>Huffman Coding Algorithm</em>, n.d.)</p>
</blockquote>
<h1>History</h1>
<p>David A. Huffman, an electrical engineer from Ohio, is the creator of <em>Huffman Coding.</em> He received numerous awards, latest of which, the Richard Hamming Medal in 1999.</p>
<p>Sadly, Mr Huffman passed away in 1999 after battling cancer.</p>
<h1>What is a Huffman Code</h1>
<p>A Huffman code is a type of code that is used for lossless compression. Which means all data compressed can be used to reconstruct bit-for-bit the exact data before the compression.</p>
<h2>Example:</h2>
<p><code>BCAADDDCCACACAC</code></p>
<p>Counting the total amount of bits equal to 15 * 8 = 120</p>
<p>Where ASCII representation of the characters follow:</p>
<table>
<thead>
<tr>
<th>Binary Value</th>
<th>Symbol</th>
</tr>
</thead>
<tbody>
<tr>
<td>01000001</td>
<td>A</td>
</tr>
<tr>
<td>01000010</td>
<td>B</td>
</tr>
<tr>
<td>01000011</td>
<td>C</td>
</tr>
<tr>
<td>01000100</td>
<td>D</td>
</tr>
</tbody>
</table>
<p>The last 5 bits repeat 01000, which can be removed.</p>
<table>
<thead>
<tr>
<th>Binary Value</th>
<th>Symbol</th>
</tr>
</thead>
<tbody>
<tr>
<td>001</td>
<td>A</td>
</tr>
<tr>
<td>010</td>
<td>B</td>
</tr>
<tr>
<td>011</td>
<td>C</td>
</tr>
<tr>
<td>100</td>
<td>D</td>
</tr>
</tbody>
</table>
<p>Recalculating the bits gives 15 3 = 45 for the original message. Plus the ASCII character should be included along with its new values which will be calculated as 5 8 = 40 (ASCII characters) and 3 * 5 = 15 (Remapped values). Total bits for the message 45 + 40 + 15 = 100</p>
<h1>References:</h1>
<p><a href="https://www.ascii-code.com/">https://www.ascii-code.com/</a></p>
<p><em>Huffman coding algorithm</em>. (n.d.). Retrieved March 29, 2025, from <a href="https://www.programiz.com/dsa/huffman-coding">https://www.programiz.com/dsa/huffman-coding</a></p>

    ]]>
      </content>
    </entry>
  
    
    <entry>
      <title>Git Quickstart</title>
      <link href="https://neosahadeo.github.io/journal//journal/posts/2025-04-04-git-quickstart/"/>
      <updated>2025-04-04T00:00:00Z</updated>
      <id>https://neosahadeo.github.io/journal//journal/posts/2025-04-04-git-quickstart/</id>
      <content type="html">
        <![CDATA[
      <p>DEMO</p>

    ]]>
      </content>
    </entry>
  
</feed>